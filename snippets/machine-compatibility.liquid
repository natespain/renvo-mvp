{%- comment -%}
  Renders a “Machine model” dropdown from the product metafield:
  Namespace: custom
  Key: machine_compatibility
  Type: list.single_line_text
  Saves selection to: line item property "Machine model"

  Requirements:
  - Include inside the product form ({{ form | form 'product' }}) so the input posts.
  - Dawn/OS2.0 form id convention: product-form-{{ section.id }}
{%- endcomment -%}

{%- assign mc = product.metafields.custom.machine_compatibility -%}
{%- assign mc_list = mc.value | default: mc -%} {# some themes return .value as array; this keeps it robust #}

{%- if mc_list and mc_list.size > 0 -%}
  <div class="product__block machine-compatibility" data-machine-compatibility>
    <label class="form__label" for="mc-select-{{ section.id }}">Machine model</label>

    <select
      id="mc-select-{{ section.id }}"
      class="select"
      name="properties[Machine model]"
      required
      aria-describedby="mc-help-{{ section.id }}"
    >
      <option value="" selected disabled>Select your machine</option>
      {%- for item in mc_list -%}
        <option value="{{ item | escape }}">{{ item }}</option>
      {%- endfor -%}
    </select>

    <div id="mc-help-{{ section.id }}" class="helptext">
      Choose the exact hardware this wrap will fit.
    </div>
    <p id="mc-error-{{ section.id }}" class="field-error" hidden>Please choose your machine model.</p>
  </div>

  <script>
    (function() {
      const form =
        document.getElementById('product-form-{{ section.id }}') ||
        document.querySelector('form[action*="/cart/add"]');

      const select = document.getElementById('mc-select-{{ section.id }}');
      const errorEl = document.getElementById('mc-error-{{ section.id }}');
      const addToCartBtn = form ? form.querySelector('[type="submit"], button[name="add"]') : null;

      if (!form || !select) return;

      // Preselect via URL param ?machine=Freestanding%2032
      try {
        const params = new URLSearchParams(window.location.search);
        const preset = params.get('machine');
        if (preset) {
          for (const opt of select.options) {
            if (opt.value.toLowerCase() === preset.toLowerCase()) {
              opt.selected = true;
              break;
            }
          }
        }
      } catch (e) {}

      function validate() {
        const valid = !!select.value;
        if (errorEl) errorEl.hidden = valid;
        if (addToCartBtn) addToCartBtn.disabled = addToCartBtn.disabled ? addToCartBtn.disabled : !valid;
        return valid;
      }

      // Initial state
      validate();

      select.addEventListener('change', validate);

      // Guard form submission (covers Ajax add-to-cart in Dawn)
      form.addEventListener('submit', function(e) {
        if (!validate()) {
          e.preventDefault();
          select.focus();
        }
      }, true);
    })();
  </script>

  <style>
    .machine-compatibility { margin-block: 0.75rem 1rem; }
    .machine-compatibility .helptext { font-size: 0.9rem; opacity: 0.8; margin-top: 0.25rem; }
    .machine-compatibility .field-error { color: #b00020; font-size: 0.9rem; margin-top: 0.4rem; }
    .machine-compatibility select:invalid { outline: 2px solid transparent; }
  </style>
{%- endif -%}
